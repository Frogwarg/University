@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@model University.ViewModels.GroupsViewModel

@{
    var user = await UserManager.GetUserAsync(User);
    var isAdmin = user != null ? await UserManager.IsInRoleAsync(user, "Admin") : false;
}

<form class="filter__form" asp-action="SearchGroups" asp-controller="Group" method="get">
    <div>
        <label>Название: </label>
        <input type="text" name="searchTerm" placeholder="Название группы..." value="@Model.SearchTerm" />

        <label>Курс: </label>
        <select name="selectedCourse">
            <option value="">Все курсы</option>
            @foreach (var course in Model.UniqueCourses)
            {
                <option value="@course.Id" selected="@(Model.SelectedCourse == course)">@course.Name</option>
            }
        </select>
        <input type="submit" value="Поиск" />
    </div>
</form>

<table>
    <caption>Группы</caption>
    <thead>
        <td>Наименование</td>
        <td>Описание</td>
        <td>Курс</td>
        <td>Куратор</td>
        <td>Студенты</td>
        @if (isAdmin)
        {
            <td colspan="2">Действия</td>
        }
    </thead>
    @if (Model.FilteredGroups != null && Model.FilteredGroups.Any())
    {
        @foreach (var group in Model.FilteredGroups)
        {
            <tr>
                <td>@group.Name</td>
                <td class="table__col_description">@(!string.IsNullOrEmpty(@group.Description) ? @group.Description : "*Пусто*")</td>
                <td><a asp-controller="Course" asp-action="SearchCourses" asp-route-searchCourse="@(@group.Course != null ? @group.Course.Name : "")">@(@group.Course != null ? @group.Course.Name : "Пусто")</a></td>
                <td>
                    @if (group.Curator == null)
                    {
                        <p>Пусто</p>
                    }
                    else
                    {
                        <a target="_blank" asp-controller="Teacher" asp-action="SearchTeachers" asp-route-selectedTeacher="@group.Curator.Name">@(@group.Curator.Surname + " " + @group.Curator.Name[0] + ". " + @group.Curator.Patronymic[0] + ". ")</a>
                    }
                </td>
                <td><a asp-controller="Student" asp-action="SearchStudents" asp-route-searchGroup="@group.Name">Просмотреть</a></td>
                @if (isAdmin)
                {
                    <td>
                        <button type="button" class="update__button"
                                data-id="@group.Id"
                                data-name="@group.Name"
                                data-description="@group.Description"
                                data-course="@group.CourseId"
                                data-curator="@group.CuratorId">
                            Изменить
                        </button>
                    </td>
                    <td><a asp-action="DeleteGroup" asp-controller="Group" asp-route-GroupID="@group.Id">Удалить</a></td>
                }
            </tr>
        }
    }
    else
    {
        <tfoot><td  colspan="@(isAdmin ?7:5)">Результатов нет</td></tfoot>
    }
</table>

@if (isAdmin)
{
    <div class="add__button_container">
        <button type="button" id="add__button" class="add__button">+Добавить</button>
    </div>

    <div class="create__container" style="display: none;">
        <form class="create__form" asp-action="CreateGroup" asp-controller="Group" method="post">
            <p class="create__name">Наименование группы: </p>
            <input name="createName" placeholder="Наименование..." required>
            <p class="create__description">Описание:</p>
            <input name="createDesc" placeholder="Описание...">
            <p class="create__course">Курс:</p>
            @if (Model.UniqueCourses.Count != 0)
            {
                <select name="createCourse" id="" required>
                    @foreach (var course in Model.UniqueCourses)
                    {
                        <option value="@course.Id">@course.Name</option>
                    }
                </select>
            }
            else
            {
                <button type="button" class="create__course" onclick="location.href='@Url.Action("Courses", "Course")'">Создать курс</button>
            }
            <p class="create__teacher">Куратор (свободный): </p>
            @{
                List<Teacher> freeTeachers = Model.Teachers.Where(t => t.Group == null).ToList();
            }
            @if (@freeTeachers.Count != 0)
            {
                <select name="createCurator" id="" required>
                    @foreach (var teacher in Model.Teachers.Where(t => t.Group == null))
                    {
                        <option value="@teacher.Id">@(@teacher.Surname + " " + teacher.Name + " " + teacher.Patronymic)</option>
                    }
                </select>
                <input class="create__btn" type="submit" value="Создать группу">
            }
            else
            {
                <button type="button" class="create__teacher" onclick="location.href='@Url.Action("Teachers", "Teacher")'">Добавить преподавателя</button>
            }
        </form>
    </div>

    <div class="update__container" style="display: none;">
        <form class="update__form" asp-action="UpdateGroup" asp-controller="Group" method="post">
            <input type="hidden" name="originalName" value="" id="originalName">
            <input type="hidden" name="updateId" id="updateGroupId" />
            <p class="update__name">Наименование группы: </p>
            <input name="updateName" placeholder="Наименование..." required>
            <p class="update__description">Описание:</p>
            <input name="updateDesc" placeholder="Описание...">
            <p class="update__course">Курс:</p>
            @if (Model.UniqueCourses.Count != 0)
            {
                <select name="updateCourse" id="" required>
                    @foreach (var course in Model.UniqueCourses)
                    {
                        <option value="@course.Id">@course.Name</option>
                    }
                </select>
            }
            else
            {
                <button type="button" class="create__course" onclick="location.href='@Url.Action("Courses", "Course")'">Создать курс</button>
            }
            <p class="update__teacher">Куратор (свободный): </p>
            @{
                List<Teacher> freTeachers = Model.Teachers.Where(t => t.Group == null).ToList();
            }
            @if (@freTeachers.Count != 0)
            {
                <select name="updateCurator" id="updateCurator">
                    <option selected>Оставить текущего</option>
                    @foreach (var teacher in Model.Teachers.Where(t => t.Group == null))
                    {
                        <option value="@teacher.Id">@(@teacher.Surname + " " + teacher.Name + " " + teacher.Patronymic)</option>
                    }
                </select>
                <input class="update__btn" type="submit" value="Обновить информацию">
            }
            else
            {
                <button type="button" class="create__teacher" onclick="location.href='@Url.Action("Teachers", "Teacher")'">Добавить преподавателя</button>
                <input class="update__btn" type="submit" value="Обновить информацию">
            }
        </form>
    </div>
}

@section Scripts{
    <script>
        $(document).ready(function () {
            $('.update__button').on('click', function () {
                var groupId = $(this).data('id');
                var groupName = $(this).data('name');
                var groupDescription = $(this).data('description');
                var groupCourse = $(this).data('course');
                var groupCurator = $(this).data('curator');

                $('#updateGroupId').val(groupId);
                $('input[name="updateName"]').val(groupName);
                $('input[name="updateDesc"]').val(groupDescription);
                $('#originalName').val(groupName);

                $('select[name="updateCourse"]').val(groupCourse);
                // $('select[name="updateCurator"]').val(groupCurator);


                $('#add__button').text('Закрыть');
                if (!$('.update__container').is(':visible')) {
                    $('.create__container').hide();
                    $('.update__container').show();
                }
            });
            $('#add__button').on('click', function () {
                if (!$('.create__container').is(':visible') && !$('.update__container').is(':visible')) {
                    $('.create__container').show();
                    $('#add__button').text('Закрыть');
                } else if ($('.create__container').is(':visible')) {
                    $('.create__container').hide();
                    $('#add__button').text('+Добавить');
                } else if ($('.update__container').is(':visible')) {
                    $('.update__container').hide();
                    $('#add__button').text('+Добавить');
                }
            });
            function verifyGroupName(form, nameField, originalNameField, event) {
                var newName = form.find(`input[name="${nameField}"]`).val();
                var originalName = form.find(`input[name="${originalNameField}"]`).val();

                if (newName === originalName) {
                    // Имя не изменилось, пропускаем проверку
                    return;
                }
                $.ajax({
                    url: '/Group/VerifyGroupName',
                    type: 'GET',
                    data: { createName: form.find(`input[name="${nameField}"]`).val() },
                    async: false,
                    success: function (result) {
                        if (!result) {
                            // Имя не уникально, предотвращаем отправку формы
                            event.preventDefault();
                            alert('Название группы должно быть уникальным.');
                        }
                    }
                });
            }
            $('form.create__form').submit(function (event) {
                verifyGroupName($(this), 'createName', null, event);
            });

            $('form.update__form').submit(function (event) {
                verifyGroupName($(this), 'updateName', 'originalName', event);
            });
        });
    </script>
}



